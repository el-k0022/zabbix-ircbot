{
   "agent.hostname": "Agent host name defined in the configuration file. String value.",
   "agent.ping": "Check the agent usability. Always return 1. Can be used as a TCP ping.",
   "agent.version": "Version of zabbix_agent(d) running on monitored host. String value. Example of returned value: 1.1",
   "eventlog[logtype,<pattern>,<severity>,<source>,<eventid>,<maxlines>,<mode>]": "Monitoring of Windows event logs. pattern, severity, eventid - regular expressions",
   "kernel.maxfiles": "Maximum number of opened files supported by OS.",
   "kernel.maxproc": "Maximum number of processes supported by OS.",
   "log[file,<pattern>,<encoding>,<maxlines>,<mode>,<output>]": "Monitoring of log file. pattern - regular expression",
   "logrt[file_format,<pattern>,<encoding>,<maxlines>,<mode>,<output>]": "Monitoring of log file with rotation. fileformat - [path][regexp], pattern - regular expression",
   "net.dns.record[<ip>,zone,<type>,<timeout>,<count>,<protocol>]": "Performs a DNS query. On success returns a character string with the required type of information.",
   "net.dns[<ip>,zone,<type>,<timeout>,<count>,<protocol>]": "Checks if DNS service is up. 0 - DNS is down (server did not respond or DNS resolution failed), 1 - DNS is up.",
   "net.if.collisions[if]": "Out-of-window collision. Collisions count.",
   "net.if.in[if,<mode>]": "Network interface input statistic. Integer value. If mode is missing bytes is used.",
   "net.if.list": "List of network interfaces. Text value.",
   "net.if.out[if,<mode>]": "Network interface output statistic. Integer value. If mode is missing bytes is used.",
   "net.if.total[if,<mode>]": "Sum of network interface incoming and outgoing statistics. Integer value. Mode - one of bytes (default), packets, errors or dropped",
   "net.tcp.listen[port]": "Checks if this port is in LISTEN state. 0 - it is not, 1 - it is in LISTEN state.",
   "net.tcp.port[<ip>,port]": "Check, if it is possible to make TCP connection to the port number. 0 - cannot connect, 1 - can connect. IP address is optional. If IP is missing, 127.0.0.1 is used. Example: net.tcp.port[,80]",
   "net.tcp.service.perf[service,<ip>,<port>]": "Check performance of service \"service\". 0 - service is down, sec - number of seconds spent on connection to the service. If IP is missing 127.0.0.1 is used. If port number is missing, default service port is used.",
   "net.tcp.service[service,<ip>,<port>]": "Check if service is available. 0 - service is down, 1 - service is running. If IP is missing 127.0.0.1 is used. If port number is missing, default service port is used. Example: net.tcp.service[ftp,,45].",
   "net.udp.listen[port]": "Checks if this port is in LISTEN state. 0 - it is not, 1 - it is in LISTEN state.",
   "perf_counter[counter,<interval>]": "Value of any performance counter, where \"counter\" parameter is the counter path and \"interval\" parameter is a number of last seconds, for which the agent returns an average value.",
   "proc.mem[<name>,<user>,<mode>,<cmdline>,<memtype>]": "Memory used by a process. <name> process name (default: \"all processes\"). <user> user name (default: \"all users\"). <mode> possible values: avg, max, min, sum (default). <cmdline> filter by command line (supports regex). <memtype> type of process memory (supported on some platforms, see documentation). Example: proc.mem[,root].",
   "proc.num[<name>,<user>,<state>,<cmdline>]": "Number of processes. <name> and <user> same as in proc.mem item. <state> all (default), run, sleep, zomb. <cmdline> filter by command line (supports regex). Example: proc.num[apache2,www-data]. On Windows, only <name> and <user> are supported.",
   "proc_info[<process>,<attribute>,<type>]": "Different information about specific process(es)",
   "service_state[service]": "State of service. 0 - running, 1 - paused, 2 - start pending, 3 - pause pending, 4 - continue pending, 5 - stop pending, 6 - stopped, 7 - unknown, 255 - no such service",
   "system.boottime": "Timestamp of system boot.",
   "system.cpu.intr": "Device interrupts.",
   "system.cpu.load[<cpu>,<mode>]": "CPU(s) load. Processor load. The cpu and mode are optional. If cpu is missing all is used. If mode is missing avg1 is used. Note that this is not percentage.",
   "system.cpu.num": "Number of available processors.",
   "system.cpu.switches": "Context switches.",
   "system.cpu.util[<cpu>,<type>,<mode>]": "CPU(s) utilisation. Processor load in percents. The cpu, type and mode are optional. If cpu is missing all is used. If type is missing user is used. If mode is missing avg1 is used.",
   "system.hostname[<type>]": "Returns hostname (or NetBIOS name (by default) on Windows). String value. Example of returned value: www.zabbix.com",
   "system.hw.chassis[<info>]": "Chassis info - returns full info by default",
   "system.hw.cpu[<cpu>,<info>]": "CPU info - lists full info for all CPUs by default",
   "system.hw.devices[<type>]": "Device list - lists PCI devices by default",
   "system.hw.macaddr[<interface>,<format>]": "MAC address - lists all MAC addresses with interface names by default",
   "system.localtime": "System local time. Time in seconds.",
   "system.run[command,<mode>]": "Run specified command on the host.",
   "system.stat[resource,<type>]": "Virtual memory statistics.",
   "system.sw.arch": "Software architecture",
   "system.sw.os[<info>]": "Current OS - returns full info by default",
   "system.sw.packages[<package>,<manager>,<format>]": "Software package list - lists all packages for all supported package managers by default",
   "system.swap.in[<swap>,<type>]": "Swap in. If type is count - swapins is returned. If type is pages - pages swapped in is returned. If swap is missing all is used.",
   "system.swap.out[<swap>,<type>]": "Swap out. If type is count - swapouts is returned. If type is pages - pages swapped in is returned. If swap is missing all is used.",
   "system.swap.size[<swap>,<mode>]": "Swap space. Number of bytes. If swap is missing all is used. If mode is missing free is used.",
   "system.uname": "Returns detailed host information. String value",
   "system.uptime": "System uptime in seconds.",
   "system.users.num": "Number of users connected. Command who is used on agent side.",
   "vfs.dev.read[device,<type>,<mode>]": "Device read statistics.",
   "vfs.dev.write[device,<type>,<mode>]": "Device write statistics.",
   "vfs.file.cksum[file]": "Calculate check sum of a given file. Check sum of the file calculate by standard algorithm used by UNIX utility cksum. Example: vfs.file.cksum[/etc/passwd]",
   "vfs.file.contents[file,<encoding>]": "Get contents of a given file.",
   "vfs.file.exists[file]": "Check if file exists. 0 - file does not exist, 1 - file exists",
   "vfs.file.md5sum[file]": "Calculate MD5 check sum of a given file. String MD5 hash of the file. Can be used for files less than 64MB, unsupported otherwise. Example: vfs.file.md5sum[/usr/local/etc/zabbix_agentd.conf]",
   "vfs.file.regexp[file,regexp,<encoding>,<start line>,<end line>,<output>]": "Find string in a file. Matched string",
   "vfs.file.regmatch[file,regexp,<encoding>,<start line>,<end line>]": "Find string in a file. 0 - expression not found, 1 - found",
   "vfs.file.size[file]": "Size of a given file. Size in bytes. File must have read permissions for user zabbix. Example: vfs.file.size[/var/log/syslog]",
   "vfs.file.time[file,<mode>]": "File time information. Number of seconds.The mode is optional. If mode is missing modify is used.",
   "vfs.fs.inode[fs,<mode>]": "Number of inodes for a given volume. If mode is missing total is used.",
   "vfs.fs.size[fs,<mode>]": "Calculate disk space for a given volume. Disk space in KB. If mode is missing total is used. In case of mounted volume, unused disk space for local file system is returned. Example: vfs.fs.size[/tmp,free].",
   "vm.memory.size[<mode>]": "Amount of memory size in bytes. If mode is missing total is used.",
   "web.page.get[host,<path>,<port>]": "Get content of web page. Default path is /",
   "web.page.perf[host,<path>,<port>]": "Get timing of loading full web page. Default path is /",
   "web.page.regexp[host,<path>,<port>,<regexp>,<length>,<output>]": "Get first occurrence of regexp in web page. Default path is /",
   "wmi.get[<namespace>,<query>]": "Execute WMI query and return the first selected object."
}
